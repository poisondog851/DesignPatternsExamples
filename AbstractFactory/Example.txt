package test;


public class Test {
    
    public static void main(String[]args) {
        Client.createTypeOne();
        Client.createTypeTwo();
    }
    
}



interface AbstractProductA{};



class ProductA1 implements AbstractProductA {};
class ProductA2 implements AbstractProductA {};



interface AbstractProductB{

    void interact(AbstractProductA productA);
    
};



class ProductB1 implements AbstractProductB {

    @Override
    public void interact(AbstractProductA productA) {
        System.out.println(this.getClass().getSimpleName() + " interacts " + productA.getClass().getSimpleName());
    }
}



class ProductB2 implements AbstractProductB {

    @Override
    public void interact(AbstractProductA productA) {
        System.out.println(this.getClass().getSimpleName() + " interacts " + productA.getClass().getSimpleName());
    }
    
}




interface AbstractFactory {
    
    public AbstractProductA createProductA();
    public AbstractProductB createProductB();
    
}



class ConcreteFactory1 implements AbstractFactory {

    @Override
    public AbstractProductA createProductA() {
        return new ProductA1();
    }

    @Override
    public AbstractProductB createProductB() {
        return new ProductB1();
    }
    
}



class ConcreteFactory2 implements  AbstractFactory {

    @Override
    public AbstractProductA createProductA() {
        return new ProductA2();
    }

    @Override
    public AbstractProductB createProductB() {
        return new ProductB2();
    }
    
}



class Client {
    
    private static AbstractFactory AFactory;
    private static AbstractProductA AProductA;
    private static AbstractProductB AProductB;
    
    public static void createTypeOne() {
        AFactory = new ConcreteFactory1();
        run();
    }
    
    public static void createTypeTwo() {
        AFactory = new ConcreteFactory2();
        run();
    }
    
    public static void run() {
        AProductA = AFactory.createProductA();
        AProductB = AFactory.createProductB();
        AProductB.interact(AProductA);
    }
    
}





