package test;


import java.io.BufferedReader;
import java.io.InputStreamReader;


public class Test {

    public static void main(String[] args) {

        // Creating chain's elements
        ManagerPPower manager = new ManagerPPower();
        DirectorPPower director = new DirectorPPower();
        VicePresidentPPower vp = new VicePresidentPPower();
        PresidentPPower president = new PresidentPPower();

        // Creating chain
        manager.setSuccessor(director);
        director.setSuccessor(vp);
        vp.setSuccessor(president);

        // enter ctrl+c to kill.
        try {
            while (true) {
                System.out
                        .println("Enter the amount to check who should approve your expenditure.");
                System.out.print(">");
                double d = Double.parseDouble(new BufferedReader(
                        new InputStreamReader(System.in)).readLine());
                manager.processRequest(new PurchaseRequest(0, d, "General"));
            }
        } catch (Exception e) {
            System.exit(1);
        }
    }

}



class PurchaseRequest {
    private int number;
    private double amount;
    private String purpose;

    public PurchaseRequest(int number, double amount, String purpose) {
        this.number = number;
        this.amount = amount;
        this.purpose = purpose;
    }

    public int getNumber() {
        return number;
    }

    public void setNumber(int number) {
        this.number = number;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getPurpose() {
        return purpose;
    }

    public void setPurpose(String purpose) {
        this.purpose = purpose;
    }

}



abstract class PurchasePower {

    protected final double base = 500;
    protected PurchasePower successor;

    public void setSuccessor(PurchasePower successor) {
        this.successor = successor;
    }

    abstract public void processRequest(PurchaseRequest request);
}



class ManagerPPower extends PurchasePower {

    private final double ALLOWABLE = 10 * base;

    public void processRequest(PurchaseRequest request) {
        if (request.getAmount() < ALLOWABLE)
            System.out.println("Manager will approve $" + request.getAmount());
        else if (successor != null)
            successor.processRequest(request);
    }
    
}



class DirectorPPower extends PurchasePower {

    private final double ALLOWABLE = 20 * base;

    public void processRequest(PurchaseRequest request) {
        if (request.getAmount() < ALLOWABLE)
            System.out.println("Director will approve $" + request.getAmount());
        else if (successor != null)
            successor.processRequest(request);
    }
    
}



class VicePresidentPPower extends PurchasePower {

    private final double ALLOWABLE = 40 * base;

    public void processRequest(PurchaseRequest request) {
        if (request.getAmount() < ALLOWABLE)
            System.out.println("VicePresident will approve $"
                    + request.getAmount());
        else if (successor != null)
            successor.processRequest(request);
    }
}



class PresidentPPower extends PurchasePower {

    private final double ALLOWABLE = 60 * base;

    public void processRequest(PurchaseRequest request) {
        if (request.getAmount() < ALLOWABLE)
            System.out
                    .println("President will approve $" + request.getAmount());
        else if (successor != null)
            successor.processRequest(request);
    }
    
}
