package test;



public class Test{
    public static void main(String [] args){
        System.out.println("Way #1");
        Singleton singleton1_1 = Singleton.getInstance();
        Singleton singleton1_2 = Singleton.getInstance();
        System.out.println("singleton1_1 hashcode: " + singleton1_1.hashCode()
        +"\nsingleton1_2 hashcode: " + singleton1_2.hashCode());
        
        System.out.println("Way #2");
        Singleton2 singleton2_1 = Singleton2.getInstance();
        Singleton2 singleton2_2 = Singleton2.getInstance();
        System.out.println("singleton2_1 hashcode: " + singleton2_1.hashCode()
        +"\nsingleton2_2 hashcode: " + singleton2_2.hashCode());
        
        System.out.println("Way #3");
        Singleton3 singleton3_1 = Singleton3.getInstance();
        Singleton3 singleton3_2 = Singleton3.getInstance();
        System.out.println("singleton3_1 hashcode: " + singleton3_1.hashCode()
        +"\nsingleton3_2 hashcode: " + singleton3_2.hashCode());
        
        System.out.println("Way #4");
        Singleton4 singleton4_1 = Singleton4.getInstance();
        Singleton4 singleton4_2 = Singleton4.getInstance();
        System.out.println("singleton4_1 hashcode: " + singleton4_1.hashCode()
        +"\nsingleton4_2 hashcode: " + singleton4_2.hashCode());
        
        System.out.println("Way #5");
        Singleton5 singleton5_1 = Singleton5.getInstance();
        Singleton5 singleton5_2 = Singleton5.getInstance();
        System.out.println("singleton5_1 hashcode: " + singleton5_1.hashCode()
        +"\nsingleton5_2 hashcode: " + singleton5_2.hashCode());
    }
}

//Way #1
class Singleton{
    private static final Singleton INSTANCE = new Singleton();
    private Singleton(){};
    
    public static  Singleton getInstance(){
        return INSTANCE;
    }
}

//Way #2
class Singleton2{
    private static final Singleton2 INSTANCE;
    private Singleton2(){};
    
    static{
        try{
            INSTANCE = new Singleton2();
        } catch(Exception e) {
            throw new RuntimeException("Exception occured in creating singleton class");
        }
    }
    
    public static Singleton2 getInstance(){
        return INSTANCE;
    }
}

//Way #3 Lazy initialization
class Singleton3{
    private static Singleton3 INSTANCE;
    
    private Singleton3(){};
    
    public static Singleton3 getInstance(){
        if(INSTANCE == null){
            INSTANCE = new Singleton3();
        }
        return INSTANCE;
    }
}
//Way #4 Thread safe
class Singleton4{
    private static Singleton4 INSTANCE;
    
    private Singleton4(){};
    
    public synchronized static Singleton4 getInstance(){
        if(INSTANCE == null){
            INSTANCE = new Singleton4();
        }
        return INSTANCE;
    }
    //double locking
    public static Singleton4 getInstanceDL(){
        if(INSTANCE == null){
            synchronized(Singleton4.class){
                if(INSTANCE == null){
                    INSTANCE = new Singleton4();
                }
            }
        }
        return INSTANCE;
    }
}
//Way #5
class Singleton5{
    private Singleton5(){};
    
    private static class InnerClass{
        private static final Singleton5 INSTANCE = new Singleton5();
    }
    public static Singleton5 getInstance(){
        return InnerClass.INSTANCE;
    }
    
}

